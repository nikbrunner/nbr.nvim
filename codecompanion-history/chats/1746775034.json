{"settings":{"temperature":1,"frequency_penalty":0,"model":"gpt-4.1","presence_penalty":0,"top_p":1},"messages":[{"id":1191187114,"cycle":1,"role":"system","content":"You are an AI programming assistant named \"CodeCompanion\". You are currently plugged into the Neovim text editor on a user's machine.\n\nYour core tasks include:\n- Answering general programming questions.\n- Explaining how the code in a Neovim buffer works.\n- Reviewing the selected code from a Neovim buffer.\n- Generating unit tests for the selected code.\n- Proposing fixes for problems in the selected code.\n- Scaffolding code for a new workspace.\n- Finding relevant code to the user's query.\n- Proposing fixes for test failures.\n- Answering questions about Neovim.\n- Running tools.\n\nYou must:\n- Follow the user's requirements carefully and to the letter.\n- Keep your answers short and impersonal, especially if the user's context is outside your core tasks.\n- Minimize additional prose unless clarification is needed.\n- Use Markdown formatting in your answers.\n- Include the programming language name at the start of each Markdown code block.\n- Avoid including line numbers in code blocks.\n- Avoid wrapping the whole response in triple backticks.\n- Only return code that's directly relevant to the task at hand. You may omit code that isnâ€™t necessary for the solution.\n- Avoid using H1, H2 or H3 headers in your responses as these are reserved for the user.\n- Use actual line breaks in your responses; only use \"\\n\" when you want a literal backslash followed by 'n'.\n- All non-code text responses must be written in the English language indicated.\n- Multiple, different tools can be called as part of the same response.\n\nWhen given a task:\n1. Think step-by-step and, unless the user requests otherwise or the task is very simple, describe your plan in detailed pseudocode.\n2. Output the final code in a single code block, ensuring that only relevant code is included.\n3. End your response with a short suggestion for the next user turn that directly supports continuing the conversation.\n4. Provide exactly one complete reply per conversation turn.\n5. If necessary, execute multiple tools in a single turn.","opts":{"visible":false,"tag":"from_config"}},{"id":470827178,"cycle":1,"role":"user","content":"You are an expert at following the Conventional Commit specification. Given the git diff listed below, generate a succinct commit message.\n\n- The summary line MUST NOT exceed 72 characters.\n- In most cases, the summary alone is sufficient; ONLY add a body if the change is complex or non-obvious.\n- If you do add a body, it should be concise and use bullet points.\n- Wrap variable names or code elements in backticks.\n- Consider changed file paths for scope.\n- Omit explanations and return only the commit message text.\n\n\nPrevious commits in this feature branch (most recent first):\n\n```\nfeat(deps): upgrade\n\nfeat(code_companion): enable history extension and add history keymap\n- Activate `codecompanion-history.nvim` and configure `extensions.history`\n- Change history save path to `stdpath(\"config\")`\n- Map `<leader>aih` to open chat history via `CodeCompanionHistory`\n\nfeat(code_companion): update commit prompt and switch default to openai adapter\n\nfeat(lazy): enable checker\n\nfeat(fastaction): remove FastAction plugin integration\n\nfeat(code_companion): remove custom chat save/load, prep for history extension\n- Delete custom functions and commands for saving and loading CodeCompanion\n  chats from `specs/code_companion.lua`\n- Comment out configuration for the planned\n  `codecompanion-history.nvim` history extension and add a dependency line\n- Keep existing `anthropic_no_reason` adapter logic, now inlined\n- Simplify plugin setup by removing the `config` block that registered\n  custom commands\n- Clean up unused local variables and functionality for chat persistence\n\nfeat(colorschemes): add kanso theme\n\nfix(mason): update plugin source and refactor LSP installer logic\n- Change plugin sources for `mason.nvim` and `mason-lspconfig.nvim` to\n  `mason-org` instead of `williamboman`\n- Refactor LSP installer to use `package:get_latest_version()` for updates,\n  improving reliability and simplicity\n- Remove use of callback-based version checking logic within the install\n  handler\n\nfeat(deps): upgrade\n\nfeat(markdown): integrate markdown-tools.nvim and update handling\n- Add `markdown-tools.nvim` as a dependency for improved Markdown support\n- Remove local mappings and logic for toggling checkbox and code block,\n  now handled by `markdown-tools.nvim`\n- Add a new spec in `lua/specs/markdown_tools.lua` with custom keymaps\n  for Markdown functions and conceal settings\n- Update `lazy-lock.json` to include `markdown-tools.nvim` and remove\n  obsolete plugin entries\n\n\n```\n\nEnsure consistency with these commits. Adhere to the 72-character summary rule.\n\nChanges to commit:\n\n```\ndiff --git a/lazy-lock.json b/lazy-lock.json\nindex 616a1419..d7a4cc15 100644\n--- a/lazy-lock.json\n+++ b/lazy-lock.json\n@@ -8,7 +8,7 @@\n   \"bmessages.nvim\": { \"branch\": \"main\", \"commit\": \"985c6973bc27888598a03f4766a2481248a599b2\" },\n   \"bufferline.nvim\": { \"branch\": \"main\", \"commit\": \"655133c3b4c3e5e05ec549b9f8cc2894ac6f51b3\" },\n   \"ccc.nvim\": { \"branch\": \"main\", \"commit\": \"9d1a256e006decc574789dfc7d628ca11644d4c2\" },\n-  \"codecompanion-history.nvim\": { \"branch\": \"main\", \"commit\": \"a924a6c9c778d90bab7b14586f390924ac93e0bb\" },\n+  \"codecompanion-history.nvim\": { \"branch\": \"main\", \"commit\": \"c34d490f2b869cb2efd09c9930216258d7a0df61\" },\n   \"codecompanion.nvim\": { \"branch\": \"main\", \"commit\": \"12a1f0e8c8512e69d3ed64b7ac179a024794e4e4\" },\n   \"conform.nvim\": { \"branch\": \"master\", \"commit\": \"372fc521f8421b7830ea6db4d6ea3bae1c77548c\" },\n   \"contextindent.nvim\": { \"branch\": \"main\", \"commit\": \"985b3ea05fecb9a220ea126ba9c7d40b002d6b63\" },\n@@ -19,10 +19,10 @@\n   \"gitpad.nvim\": { \"branch\": \"main\", \"commit\": \"1e0f6fa335c72c05d1d3635120c572e198e5ae0d\" },\n   \"gitsigns.nvim\": { \"branch\": \"main\", \"commit\": \"43b0c856ae5f32a195d83f4a27fe21d63e6c966c\" },\n   \"gp.nvim\": { \"branch\": \"main\", \"commit\": \"2372d5323c6feaa2e9c19f7ccb537c615d878e18\" },\n-  \"grug-far.nvim\": { \"branch\": \"main\", \"commit\": \"b91e6d4bad441dcaeda3d0c6df45ed270443b60a\" },\n+  \"grug-far.nvim\": { \"branch\": \"main\", \"commit\": \"78c8d27c6f3300bfa92bb535236732d8e9bcb614\" },\n   \"helpview.nvim\": { \"branch\": \"main\", \"commit\": \"8df486915a29483c7955067a7c17bffdf3b1e5f5\" },\n   \"kanso.nvim\": { \"branch\": \"main\", \"commit\": \"7205d3902adf14c11b6aee658d6dcddd37b7ba95\" },\n-  \"key-analyzer.nvim\": { \"branch\": \"main\", \"commit\": \"72d301fb8843c19d8e69e16e0a0b42256edc25cc\" },\n+  \"key-analyzer.nvim\": { \"branch\": \"main\", \"commit\": \"f7dc4e46c5edeedfab51377388991954f54bb360\" },\n   \"kulala.nvim\": { \"branch\": \"main\", \"commit\": \"7649576ca459146658b4c415d1a320bbedc3f564\" },\n   \"lazy.nvim\": { \"branch\": \"main\", \"commit\": \"6c3bda4aca61a13a9c63f1c1d1b16b9d3be90d7a\" },\n   \"lazydev.nvim\": { \"branch\": \"main\", \"commit\": \"2367a6c0a01eb9edb0464731cc0fb61ed9ab9d2c\" },\ndiff --git a/lua/specs/code_companion.lua b/lua/specs/code_companion.lua\nindex b764d2c9..3807a125 100644\n--- a/lua/specs/code_companion.lua\n+++ b/lua/specs/code_companion.lua\n@@ -40,19 +40,9 @@ return {\n             end,\n         },\n         strategies = {\n-            -- Change the default chat adapter\n             chat = {\n-                adapter = \"openai\",\n-                slash_commands = {\n-                    [\"file\"] = {\n-                        callback = \"strategies.chat.slash_commands.file\",\n-                        description = \"Select a file using Telescope\",\n-                        opts = {\n-                            provider = \"snacks\",\n-                            contains_code = true,\n-                        },\n-                    },\n-                },\n+                -- adapter = \"openai\",\n+                adapter = \"anthropic\",\n             },\n             inline = {\n                 adapter = \"anthropic_no_reason\",\n@@ -61,7 +51,11 @@ return {\n         extensions = {\n             history = {\n                 enabled = true,\n+                ---@module \"codecompanion._extensions.history\"\n+                ---@type HistoryOpts\n                 opts = {\n+                    auto_save = true,\n+                    save_chat_keymap = \"sc\",\n                     -- Keymap to open history from chat buffer (default: gh)\n                     keymap = \"gh\",\n                     -- Automatically generate titles for new chats\n\n```","opts":{"visible":true}},{"id":1985209997,"cycle":1,"role":"llm","content":"feat(code_companion): switch chat adapter to `anthropic` and update history opts","opts":{"visible":true}}],"adapter":"openai","schemas":[],"cycle":2,"in_use":[],"updated_at":1746775036,"refs":[],"save_id":"1746775034","title":"Conventional Commit Message Generator"}