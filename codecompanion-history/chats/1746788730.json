{"messages":[{"id":1191187114,"content":"You are an AI programming assistant named \"CodeCompanion\". You are currently plugged into the Neovim text editor on a user's machine.\n\nYour core tasks include:\n- Answering general programming questions.\n- Explaining how the code in a Neovim buffer works.\n- Reviewing the selected code from a Neovim buffer.\n- Generating unit tests for the selected code.\n- Proposing fixes for problems in the selected code.\n- Scaffolding code for a new workspace.\n- Finding relevant code to the user's query.\n- Proposing fixes for test failures.\n- Answering questions about Neovim.\n- Running tools.\n\nYou must:\n- Follow the user's requirements carefully and to the letter.\n- Keep your answers short and impersonal, especially if the user's context is outside your core tasks.\n- Minimize additional prose unless clarification is needed.\n- Use Markdown formatting in your answers.\n- Include the programming language name at the start of each Markdown code block.\n- Avoid including line numbers in code blocks.\n- Avoid wrapping the whole response in triple backticks.\n- Only return code that's directly relevant to the task at hand. You may omit code that isnâ€™t necessary for the solution.\n- Avoid using H1, H2 or H3 headers in your responses as these are reserved for the user.\n- Use actual line breaks in your responses; only use \"\\n\" when you want a literal backslash followed by 'n'.\n- All non-code text responses must be written in the English language indicated.\n- Multiple, different tools can be called as part of the same response.\n\nWhen given a task:\n1. Think step-by-step and, unless the user requests otherwise or the task is very simple, describe your plan in detailed pseudocode.\n2. Output the final code in a single code block, ensuring that only relevant code is included.\n3. End your response with a short suggestion for the next user turn that directly supports continuing the conversation.\n4. Provide exactly one complete reply per conversation turn.\n5. If necessary, execute multiple tools in a single turn.","role":"system","opts":{"visible":false,"tag":"from_config"},"cycle":1},{"id":274586462,"role":"user","content":"You are an expert at following the Conventional Commit specification. Given the git diff listed below, generate a succinct commit message.\n\n- The summary line MUST NOT exceed 72 characters.\n- In most cases, the summary alone is sufficient; ONLY add a body if the change is complex or non-obvious.\n- If you do add a body, it should be concise and use bullet points.\n- Wrap variable names or code elements in backticks.\n- Consider changed file paths for scope.\n- Omit explanations and return only the commit message text.\n\n\nPrevious commits in this feature branch (most recent first):\n\n```\nrefactor(fe): move context one out of folder\n\nfix(fe/cart): fix top position and background\n\nfeat(fe): add eslint-plugin-hooks\n\nfeat(fe): add custom DCD fonts\n\nfeat(fe/header): shift out top row on scroll\n\nrefactor(fe): move animations to dedicated folder\n\nfeat(fe): align product finder layout to first draft\n\nfeat(fe/home): update styling\n\nfeat(fe/logo): simplify\n\nfeat(fe/header): update styliing\n\n\n```\n\nEnsure consistency with these commits. Adhere to the 72-character summary rule.\n\nChanges to commit:\n\n```\ndiff --git a/frontend/app/lib/hooks/use-active-order.tsx b/frontend/app/lib/hooks/use-active-order.tsx\nindex ef8fca7..ef97530 100644\n--- a/frontend/app/lib/hooks/use-active-order.tsx\n+++ b/frontend/app/lib/hooks/use-active-order.tsx\n@@ -44,11 +44,26 @@ export function useActiveOrder() {\n     );\n   };\n \n+  const addToCart = (variantId: string, quantity = 1) => {\n+    activeOrderFetcher.submit(\n+      {\n+        action: \"addItemToOrder\",\n+        variantId,\n+        quantity: quantity.toString()\n+      },\n+      {\n+        method: \"post\",\n+        action: \"/api/active-order\"\n+      }\n+    );\n+  };\n+\n   return {\n     activeOrderFetcher,\n     activeOrder,\n     removeItem,\n     adjustOrderLine,\n+    addToCart,\n     refresh\n   };\n }\ndiff --git a/frontend/app/root.tsx b/frontend/app/root.tsx\nindex c324d3d..9b27303 100644\n--- a/frontend/app/root.tsx\n+++ b/frontend/app/root.tsx\n@@ -96,7 +96,7 @@ export default function App() {\n   const { collections } = loaderData;\n   const { locale } = useLoaderData<typeof loader>();\n   const { i18n } = useTranslation();\n-  const { activeOrderFetcher, activeOrder, adjustOrderLine, removeItem, refresh } = useActiveOrder();\n+  const { activeOrderFetcher, activeOrder, adjustOrderLine, removeItem, refresh, addToCart } = useActiveOrder();\n \n   useChangeLanguage(locale);\n \n@@ -124,7 +124,8 @@ export default function App() {\n               activeOrderFetcher,\n               activeOrder,\n               adjustOrderLine,\n-              removeItem\n+              removeItem,\n+              addToCart\n             }}\n           />\n         </main>\ndiff --git a/frontend/app/routes/products.$slug.tsx b/frontend/app/routes/products.$slug.tsx\nindex d6ee499..b82af9c 100644\n--- a/frontend/app/routes/products.$slug.tsx\n+++ b/frontend/app/routes/products.$slug.tsx\n@@ -57,8 +57,9 @@ export const shouldRevalidate: ShouldRevalidateFunction = () => true;\n export default function Component({ loaderData: { product, error } }: Route.ComponentProps) {\n   const { t } = useTranslation();\n \n-  const { activeOrderFetcher } = useOutletContext<{\n+  const { activeOrderFetcher, addToCart } = useOutletContext<{\n     activeOrderFetcher: FetcherWithComponents<CartLoaderData>;\n+    addToCart: (variantId: string, quantity?: number) => void;\n   }>();\n \n   const { activeOrder } = activeOrderFetcher.data ?? {};\n@@ -142,8 +143,7 @@ export default function Component({ loaderData: { product, error } }: Route.Comp\n                 }}\n               />\n             </div>\n-            <activeOrderFetcher.Form method=\"post\" action=\"/api/active-order\">\n-              <input type=\"hidden\" name=\"action\" value=\"addItemToOrder\" />\n+            <div>\n               {1 < product.variants.length ? (\n                 <div className=\"mt-4\">\n                   <label htmlFor=\"option\" className=\"block text-sm font-medium text-gray-700\">\n@@ -153,7 +153,6 @@ export default function Component({ loaderData: { product, error } }: Route.Comp\n                     className=\"focus:border-primary-500 focus:ring-primary-500 mt-1 block w-full rounded-md border-gray-300 py-2 pr-10 pl-3 text-base focus:outline-hidden sm:text-sm\"\n                     id=\"productVariant\"\n                     value={selectedVariantId}\n-                    name=\"variantId\"\n                     onChange={e => {\n                       setSelectedVariantId(e.target.value);\n \n@@ -170,9 +169,7 @@ export default function Component({ loaderData: { product, error } }: Route.Comp\n                     ))}\n                   </select>\n                 </div>\n-              ) : (\n-                <input type=\"hidden\" name=\"variantId\" value={selectedVariantId}></input>\n-              )}\n+              ) : null}\n \n               <div className=\"mt-10 flex flex-col sm:flex-row sm:items-center\">\n                 <p className=\"mr-4 text-3xl text-gray-900\">\n@@ -183,7 +180,8 @@ export default function Component({ loaderData: { product, error } }: Route.Comp\n                 </p>\n                 <div className=\"sm:flex-col1 flex align-baseline\">\n                   <button\n-                    type=\"submit\"\n+                    type=\"button\"\n+                    onClick={() => addToCart(selectedVariantId)}\n                     className={`max-w-xs flex-1 ${\n                       activeOrderFetcher.state !== \"idle\"\n                         ? \"bg-gray-400\"\n@@ -229,7 +227,7 @@ export default function Component({ loaderData: { product, error } }: Route.Comp\n                   <p>{t(\"product.returnsInfo\")}</p>\n                 </div>\n               </section>\n-            </activeOrderFetcher.Form>\n+            </div>\n           </div>\n         </div>\n       </div>\n\n```","opts":{"visible":true},"cycle":1},{"id":1180663265,"role":"llm","content":"feat(fe/cart): add `addToCart` helper and use in product page","opts":{"visible":true},"cycle":1}],"cycle":2,"refs":[],"settings":{"frequency_penalty":0,"top_p":1,"presence_penalty":0,"temperature":1,"model":"gpt-4.1"},"schemas":[],"updated_at":1746788732,"adapter":"openai","save_id":"1746788730","in_use":[],"title":"Conventional Commit Message Generator"}